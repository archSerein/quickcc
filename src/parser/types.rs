#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub enum Action {
    Shift(State),
    Reduce(u8), // 编号见产生式列表
    Accept,
    Error,
}

#[repr(usize)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub enum State {
    S0 = 0,
    S1 = 1,
    S2 = 2,
    S3 = 3,
    S4 = 4,
    S5 = 5,
    S6 = 6,
    S7 = 7,
    S8 = 8,
    S9 = 9,
    S10 = 10,
    S11 = 11,
    S12 = 12,
    S13 = 13,
    S14 = 14,
    S15 = 15,
    S16 = 16,
    S17 = 17,
    S18 = 18,
    S19 = 19,
    S20 = 20,
    S21 = 21,
    S22 = 22,
    S23 = 23,
    S24 = 24,
    S25 = 25,
    S26 = 26,
    S27 = 27,
    S28 = 28,
    S29 = 29,
    S30 = 30,
    S31 = 31,
    S32 = 32,
    S33 = 33,
    S34 = 34,
    S35 = 35,
    S36 = 36,
    S37 = 37,
    S38 = 38,
    S39 = 39,
    S40 = 40,
    S41 = 41,
    S42 = 42,
    S43 = 43,
    S44 = 44,
    S45 = 45,
    S46 = 46,
    S47 = 47,
    S48 = 48,
    S49 = 49,
    S50 = 50,
    S51 = 51,
    S52 = 52,
    S53 = 53,
    S54 = 54,
    S55 = 55,
    S56 = 56,
    S57 = 57,
    S58 = 58,
    S59 = 59,
    S60 = 60,
    S61 = 61,
    S62 = 62,
    S63 = 63,
    S64 = 64,
    S65 = 65,
    S66 = 66,
    S67 = 67,
    S68 = 68,
    S69 = 69,
    S70 = 70,
    S71 = 71,
    S72 = 72,
    S73 = 73,
    S74 = 74,
    S75 = 75,
    S76 = 76,
    S77 = 77,
    S78 = 78,
    S79 = 79,
    S80 = 80,
    S81 = 81,
    S82 = 82,
    S83 = 83,
    S84 = 84,
    S85 = 85,
    S86 = 86,
    S87 = 87,
    S88 = 88,
    S89 = 89,
    S90 = 90,
    S91 = 91,
    S92 = 92,
    S93 = 93,
    S94 = 94,
    S95 = 95,
    S96 = 96,
    S97 = 97,
    S98 = 98,
    S99 = 99,
    S100 = 100,
    S101 = 101,
    S102 = 102,
    S103 = 103,
    S104 = 104,
    S105 = 105,
    S106 = 106,
    S107 = 107,
    S108 = 108,
    S109 = 109,
    S110 = 110,
    S111 = 111,
    S112 = 112,
    S113 = 113,
    S114 = 114,
    S115 = 115,
    S116 = 116,
    S117 = 117,
    S118 = 118,
    S119 = 119,
    S120 = 120,
    S121 = 121,
    S122 = 122,
    S123 = 123,
    S124 = 124,
    S125 = 125,
    S126 = 126,
    S127 = 127,
    S128 = 128,
    S129 = 129,
    S130 = 130,
    S131 = 131,
    S132 = 132,
    S133 = 133,
    S134 = 134,
    S135 = 135,
    S136 = 136,
    S137 = 137,
    S138 = 138,
    S139 = 139,
    S140 = 140,
    S141 = 141,
    S142 = 142,
    S143 = 143,
    S144 = 144,
    S145 = 145,
    S146 = 146,
    S147 = 147,
    S148 = 148,
}

impl State {
    pub fn to_index(self) -> usize {
        self as usize
    }
}

#[repr(usize)]
#[derive(Debug)]
pub enum NonTerm {
    Accept,
    Arguments,
    ArgumentsTail,
    CompSt,
    Dec,
    DecList,
    Def,
    DefList,
    ExtDecList,
    ExtDef,
    ExtDefList,
    FunCall,
    FunDec,
    MatchedStmt,
    NormalStmt,
    ParaDec,
    Program,
    Specifier,
    Stmt,
    StmtList,
    StructSpecifier,
    UnMatchedStmt,
    VarDec,
    VarList,
    Comparison,
    ComparisonPrime,
    Equality,
    EqualityPrime,
    Expression,
    Factor,
    FactorPrime,
    LogicalAnd,
    LogicalAndPrime,
    LogicalOr,
    LogicalOrPrime,
    Primary,
    Term,
    TermPrime,
    Unary,
}

impl NonTerm {
    pub fn to_index(&self) -> usize {
        match self {
            NonTerm::Accept => 0,
            NonTerm::Arguments => 1,
            NonTerm::ArgumentsTail => 2,
            NonTerm::CompSt => 3,
            NonTerm::Dec => 4,
            NonTerm::DecList => 5,
            NonTerm::Def => 6,
            NonTerm::DefList => 7,
            NonTerm::ExtDecList => 8,
            NonTerm::ExtDef => 9,
            NonTerm::ExtDefList => 10,
            NonTerm::FunCall => 11,
            NonTerm::FunDec => 12,
            NonTerm::MatchedStmt => 13,
            NonTerm::NormalStmt => 14,
            NonTerm::ParaDec => 15,
            NonTerm::Program => 16,
            NonTerm::Specifier => 17,
            NonTerm::Stmt => 18,
            NonTerm::StmtList => 19,
            NonTerm::StructSpecifier => 20,
            NonTerm::UnMatchedStmt => 21,
            NonTerm::VarDec => 22,
            NonTerm::VarList => 23,
            NonTerm::Comparison => 24,
            NonTerm::ComparisonPrime => 25,
            NonTerm::Equality => 26,
            NonTerm::EqualityPrime => 27,
            NonTerm::Expression => 28,
            NonTerm::Factor => 29,
            NonTerm::FactorPrime => 30,
            NonTerm::LogicalAnd => 31,
            NonTerm::LogicalAndPrime => 32,
            NonTerm::LogicalOr => 33,
            NonTerm::LogicalOrPrime => 34,
            NonTerm::Primary => 35,
            NonTerm::Term => 36,
            NonTerm::TermPrime => 37,
            NonTerm::Unary => 38,
        }
    }
}
